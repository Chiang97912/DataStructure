#include <stdio.h>

void shell_sort(int arr[], int len) {
	/************************************************************************/
	/* 希尔排序算法（缩小增量排序）                                                                     */
	/************************************************************************/
	int i,j,gap;
	int temp;
	for (gap = len/2;gap >= 1;gap /= 2) //第一层循环控制增量gap
	{
		for (i=gap;i<len;i++) //控制分组数，例如：len等于8，gap等于4，那么分组数为4，第三层循环中初始条件i-gap在第二层循环第一次循环的时候值为0，并且随着第二层循环变量自增而依次递增
		{
			for (j=i-gap;j>=0&&arr[j] > arr[j+gap];j-=gap) //1.向后比较：先将j位置和j+gap位置进行比较 2.向前比较：j-=gap，然后依次将j和j+gap比较
			{
				temp = arr[j];
				arr[j] = arr[j+gap];
				arr[j+gap] = temp;
			}
		}
	}
}

void shell_sort_plus(int arr[], int len) {
	/************************************************************************/
	/* 希尔排序算法（缩小增量排序）――增强版                                                                     */
	/************************************************************************/
	int i,j,gap;
	int temp;
	for (gap = len/2;gap >= 1;gap /= 2) //第一层循环控制增量gap
	{
		for (i=gap;i<len;i++) //控制分组数，例如：len等于8，gap等于4，那么分组数为4，第三层循环中初始条件i-gap在第二层循环第一次循环的时候值为0，并且随着第二层循环变量自增而依次递增
		{
			temp = arr[i];
			for (j=i-gap;j>=0&&arr[j] > arr[j+gap];j-=gap) //1.向后比较：先将j位置和j+gap位置进行比较 2.向前比较：j-=gap，然后依次将j和j+gap比较
			{
				arr[j+gap] = arr[j];
			}
			arr[j+gap] = temp;
		}
	}
}